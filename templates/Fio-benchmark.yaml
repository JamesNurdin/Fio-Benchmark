{{- range $index, $nodeName := $.Values.nodes }}
---
apiVersion: v1
kind: Pod
metadata:
  name: fio-bench-{{ $nodeName }}-{{ $.Values.run_name }}
  namespace: pgr24james
  labels:
    benchmark: fio-readonly
spec:
  serviceAccountName: containerroot
  serviceAccount: containerroot
  imagePullSecrets:
    - name: containerroot-dockercfg-qrptl
  securityContext:
    seLinuxOptions:
      level: 's0:c29,c14'
    runAsUser: 0
  nodeName: {{ $nodeName }}           # Pin to specific node (optional)
  restartPolicy: Never
  volumes:
    - name: fio-data
      {{- if $.Values.useEmptyDir }}
      emptyDir: {}
      {{- else }}
      persistentVolumeClaim:
        claimName: {{ $.Values.fioPvcName }}
      {{- end }}
    - name: primary
      persistentVolumeClaim:
        claimName: pgr24jamesvol1claim
    - name: empty-directory
      emptyDir: {}

  initContainers:
    - name: prefill
      image: docker.io/xridge/fio:latest
      imagePullPolicy: IfNotPresent
      command:
        - /bin/sh
        - -c
        - |
          set -e
          if [ -d /mnt/fio-test/data ] && [ "$(ls -A /mnt/fio-test/data 2>/dev/null)" ]; then
            echo "[prefill] Data already present – skipping generation."
          else
            echo "[prefill] No data found – generating 100 GiB test file..."
            mkdir -p /mnt/fio-test/data
            fio --name=fill \
                --directory=/mnt/fio-test/data \
                --rw=write --bs=1M \
                --size=100G --filesize=100G \
                --iodepth=32 --numjobs=1 --direct=1 \
                --output-format=json
          fi
      volumeMounts:
        - name: fio-data
          mountPath: /mnt/fio-test
      resources:
        requests:
          cpu: "4"
          memory: "20Gi"
        limits:
          cpu: "4"
          memory: "20Gi"
      securityContext:
        capabilities:
          drop: ["MKNOD"]

  containers:
    - name: fio
      image: docker.io/xridge/fio:latest
      imagePullPolicy: IfNotPresent
      env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
      command:
        - /bin/sh
        - -c
        - |
          set -e
          mkdir -p /mnt/primary/Mini-project/Apache/System/Node_Benchmarks/results/{{ $.Values.run_name }}
          mkdir -p /mnt/primary/Mini-project/Apache/System/Node_Benchmarks/results/{{ $.Values.run_name }}/${NODE_NAME}
          for iter in $(seq 1 5); do
            echo "### iteration $iter on ${NODE_NAME} $(date)"
            # Throughput-focused run (sequential 1M read)
            fio --output-format=json \
                --name=iceberg-read-throughput \
                --filename=/mnt/fio-test/data/fill.0.0 \
                --rw=read --bs=1M --iodepth=32 --direct=1 --readonly \
                --numjobs=1 \
                > /mnt/primary/Mini-project/Apache/System/Node_Benchmarks/results/{{ $.Values.run_name }}/${NODE_NAME}/throughput-result-${iter}.json
          
            # Latency-focused run (random 4K read)
            #fio --output-format=json \
            #    --name=iceberg-read-latency \
            #    --filename=/mnt/fio-test/data/fill.0.0 \
            #    --rw=randread --bs=4k --iodepth=32 --direct=1 --readonly \
            #    --numjobs=1 \
            #    > /mnt/primary/Mini-project/Apache/System/Node_Benchmarks/results/{{ $.Values.run_name }}/${NODE_NAME}/latency-result-${iter}.json
          done
      volumeMounts:
        - name: fio-data
          mountPath: /mnt/fio-test
        - name: primary
          mountPath: /mnt/primary/

      resources:
        requests:
          cpu: "4"
          memory: "100Gi"
        limits:
          cpu: "4"
          memory: "100Gi"
      securityContext:
        capabilities:
          drop: ["MKNOD"]
{{- end }}
